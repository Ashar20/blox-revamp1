"use strict";(self.webpackChunkionic_docs=self.webpackChunkionic_docs||[]).push([[74612],{3905:function(a,t,e){e.d(t,{Zo:function(){return g},kt:function(){return f}});var n=e(67294);function o(a,t,e){return t in a?Object.defineProperty(a,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):a[t]=e,a}function c(a,t){var e=Object.keys(a);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(a);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(a,t).enumerable}))),e.push.apply(e,n)}return e}function i(a){for(var t=1;t<arguments.length;t++){var e=null!=arguments[t]?arguments[t]:{};t%2?c(Object(e),!0).forEach((function(t){o(a,t,e[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(a,Object.getOwnPropertyDescriptors(e)):c(Object(e)).forEach((function(t){Object.defineProperty(a,t,Object.getOwnPropertyDescriptor(e,t))}))}return a}function r(a,t){if(null==a)return{};var e,n,o=function(a,t){if(null==a)return{};var e,n,o={},c=Object.keys(a);for(n=0;n<c.length;n++)e=c[n],t.indexOf(e)>=0||(o[e]=a[e]);return o}(a,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(a);for(n=0;n<c.length;n++)e=c[n],t.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(a,e)&&(o[e]=a[e])}return o}var l=n.createContext({}),s=function(a){var t=n.useContext(l),e=t;return a&&(e="function"==typeof a?a(t):i(i({},t),a)),e},g=function(a){var t=s(a.components);return n.createElement(l.Provider,{value:t},a.children)},p={inlineCode:"code",wrapper:function(a){var t=a.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(a,t){var e=a.components,o=a.mdxType,c=a.originalType,l=a.parentName,g=r(a,["components","mdxType","originalType","parentName"]),d=s(e),f=o,_=d["".concat(l,".").concat(f)]||d[f]||p[f]||c;return e?n.createElement(_,i(i({ref:t},g),{},{components:e})):n.createElement(_,i({ref:t},g))}));function f(a,t){var e=arguments,o=t&&t.mdxType;if("string"==typeof a||o){var c=e.length,i=new Array(c);i[0]=d;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=a,r.mdxType="string"==typeof a?a:o,i[1]=r;for(var s=2;s<c;s++)i[s]=e[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,e)}d.displayName="MDXCreateElement"},4542:function(a,t,e){e.r(t),e.d(t,{frontMatter:function(){return r},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return g},default:function(){return d}});var n=e(87462),o=e(63366),c=(e(67294),e(3905)),i=["components"],r={title:"  Catalog",sidebar_label:"Catalog Manager"},l=void 0,s={unversionedId:"api/action-sheet copy 2",id:"api/action-sheet copy 2",isDocsHomePage:!1,title:"  Catalog",description:"Click me",source:"@site/docs/api/action-sheet copy 2.md",sourceDirName:"api",slug:"/api/action-sheet copy 2",permalink:"/docs/api/action-sheet copy 2",editUrl:"https://github.com/ionic-team/ionic-docs/tree/main/docs/api/action-sheet copy 2.md",tags:[],version:"current",frontMatter:{title:"  Catalog",sidebar_label:"Catalog Manager"}},g=[],p={toc:g};function d(a){var t=a.components,e=(0,o.Z)(a,i);return(0,c.kt)("wrapper",(0,n.Z)({},p,e,{components:t,mdxType:"MDXLayout"}),(0,c.kt)("details",null,(0,c.kt)("summary",null,"Click me"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-class",metastring:"CatalogManager(Blox):","CatalogManager(Blox):":!0},"  def __init__(self, **kwargs):\n      \"\"\"\n\n      Catalog Manager is used to list, get and create `blox.catalog.catalog.Catalog` instances\n  \n      \"\"\"\n      super().__init__(**kwargs)\n      self.catalog_api = CatalogsApi(self.api_client)\n  \n  #\n  def list(self):\n      # This Function list the catalog\n      '''\n      Function to return a list of catalog objects for the given api key of a specific client\n\n      **Parameters** \n      - None\n\n      **Returns**\n      - `catalogs` : list of `blox.catalog.catalog.Catalog`\n      \n      \n      '''\n\n      catalog_instances = []\n\n      try:\n          response = self.catalog_api.get_catalogs(_preload_content = False)\n          catalog_list, request_id = self._get_data_from_response(response)\n          #print(catalog_list)\n          \n          for catalog in catalog_list:\n              catalog_instances.append(\n                  Catalog(\n                      name=catalog['name'],\n                      schema=catalog['schema'], \n                      datasources=catalog['data_sources'],\n                      id=catalog['catalog_id'],\n                      metadata=catalog['metadata'],\n                      extraction_config=catalog['extraction_config'],\n                      config = catalog['config'],\n                      status = catalog['status'],\n                      x_api_key=self.x_api_key,\n                      created_ts=catalog['created_ts'],\n                      updated_ts=catalog['updated_ts'])\n                  ) \n\n\n          self.logger.info('request_id: {0}'.format(request_id))        \n          return catalog_instances\n      except ApiException as api_exception:\n          self.logger.exception(\"API exception\")\n          raise BloxApiError(status = api_exception.status,reason = api_exception.reason, body = api_exception.body)\n      except:\n          self.logger.exception(\"SDK exception\")\n          raise BloxException(fmt=\"Error in retrieving catalogs\")\n\n  \n  def create(self,name:str = None,extraction_config:list = None,metadata:dict = None,config:dict = None):\n      '''\n      Function to create Catalog \n\n      **Parameters**\n      - `name` (str): Name of catalog\n      - `extraction_config` (list, optional): list of extraction configs. Each one must contain keys: \"taxonomy_id\",\"active\",\"graph_id\",\"type\"\n      - `metadata` (dict, optional): metadata\n\n      **Returns**\n      - `catalog` : `blox.catalog.catalog.Catalog`\n\n      '''\n      \n\n      payload = {\n          \"name\": name\n      }\n\n      if extraction_config:\n          payload.update({\"extraction_config\":extraction_config})\n      if metadata:\n          payload.update({\"metadata\":metadata})\n      if config:\n          payload.update({\"config\":config})\n\n      try:\n          \n          response = self.catalog_api.create_catalog(body = payload,_preload_content = False)\n          \n          catalog, request_id = self._get_data_from_response(response)\n          \n\n          #print(catalog)\n          catalog_instance = Catalog(\n                              name=catalog['name'],\n                              schema=catalog['schema'], \n                              datasources=catalog['data_sources'],\n                              id=catalog['catalog_id'],\n                              metadata=catalog['metadata'],\n                              extraction_config=catalog['extraction_config'],\n                              config = catalog['config'],\n                              x_api_key=self.x_api_key,\n                              created_ts=catalog['created_ts'],\n                              updated_ts=catalog['updated_ts'])\n          \n          self.logger.info('request_id: {0}'.format(request_id))                \n          return catalog_instance\n      except ApiException as api_exception:\n          self.logger.exception(\"API exception\")\n          raise BloxApiError(status = api_exception.status,reason = api_exception.reason, body = api_exception.body)\n      except:\n          self.logger.exception(\"SDK exception\")\n          raise BloxException(fmt=\"Error in creating catalog: {0}\".format(name))\n\n  \n  def get(self,id:str):\n      '''\n      Function that Returns catalog object when catalog_id is given\n\n      **Parameters**\n      - `catalog_id` (str) : UUID of catalog\n\n      **Returns**\n      - `catalog` : `blox.catalog.catalog.Catalog`\n\n      '''\n      try:\n          \n          response = self.catalog_api.get_catalog_by_id(catalog_id = id,_preload_content = False)\n          catalog, request_id = self._get_data_from_response(response)\n          catalog_instance = Catalog(\n                              name=catalog['name'],\n                              schema=catalog['schema'], \n                              datasources=catalog['data_sources'],\n                              id=catalog['catalog_id'],\n                              metadata=catalog['metadata'],\n                              extraction_config=catalog['extraction_config'],\n                              config = catalog['config'],\n                              status = catalog['status'],\n                              x_api_key=self.x_api_key,\n                              created_ts=catalog['created_ts'],\n                              updated_ts=catalog['updated_ts'])\n          self.logger.info('request_id: {0}'.format(request_id))                \n          return catalog_instance\n      except ApiException as api_exception:\n          self.logger.exception(\"API exception\")\n          raise BloxApiError(status = api_exception.status,reason = api_exception.reason, body = api_exception.body)\n      except:\n          self.logger.exception(\"SDK exception\")\n          raise BloxException(fmt=\"Error in retrieving catalog: {0}\".format(id))\n"))),(0,c.kt)("p",null,"Catalog Manager is used to list, get and create blox.catalog.catalog.Catalog instances."),(0,c.kt)("details",null,(0,c.kt)("summary",null,"Click me"),'```   def __init__(self, **kwargs): """',(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},'    Catalog Manager is used to list, get and create `blox.catalog.catalog.Catalog` instances\n\n    """\n    super().__init__(**kwargs)\n    self.catalog_api = CatalogsApi(self.api_client)\n')),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"\n</details>\n\n## def list(self)\n\n<details>\n<summary>Click me</summary>\n\n```     def list(self):\n      # This Function list the catalog\n      '''\n      Function to return a list of catalog objects for the given api key of a specific client\n\n      **Parameters** \n      - None\n\n      **Returns**\n      - `catalogs` : list of `blox.catalog.catalog.Catalog`\n      \n      \n      '''\n\n      catalog_instances = []\n\n      try:\n          response = self.catalog_api.get_catalogs(_preload_content = False)\n          catalog_list, request_id = self._get_data_from_response(response)\n          #print(catalog_list)\n          \n          for catalog in catalog_list:\n              catalog_instances.append(\n                  Catalog(\n                      name=catalog['name'],\n                      schema=catalog['schema'], \n                      datasources=catalog['data_sources'],\n                      id=catalog['catalog_id'],\n                      metadata=catalog['metadata'],\n                      extraction_config=catalog['extraction_config'],\n                      config = catalog['config'],\n                      status = catalog['status'],\n                      x_api_key=self.x_api_key,\n                      created_ts=catalog['created_ts'],\n                      updated_ts=catalog['updated_ts'])\n                  ) \n\n\n          self.logger.info('request_id: {0}'.format(request_id))        \n          return catalog_instances\n      except ApiException as api_exception:\n          self.logger.exception(\"API exception\")\n          raise BloxApiError(status = api_exception.status,reason = api_exception.reason, body = api_exception.body)\n      except:\n          self.logger.exception(\"SDK exception\")\n          raise BloxException(fmt=\"Error in retrieving catalogs\")\n"))),(0,c.kt)("p",null,"Function to return a list of catalog objects for the given api key of a specific client"),(0,c.kt)("ul",null,(0,c.kt)("li",{parentName:"ul"},(0,c.kt)("strong",{parentName:"li"},"Parameters"),"\nNone"),(0,c.kt)("li",{parentName:"ul"},(0,c.kt)("strong",{parentName:"li"},"Returns"),(0,c.kt)("inlineCode",{parentName:"li"},"catalogs"),"  : list of  ",(0,c.kt)("inlineCode",{parentName:"li"},"[blox.catalog.catalog.Catalog](https://d16mhahokhyjuk.cloudfront.net/staging/blox/catalog/catalog.html#Catalog)"))),(0,c.kt)("details",null,(0,c.kt)("summary",null," click me"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-def",metastring:"create(self,name:str = None,extraction_config:list = None,metadata:dict = None,config:dict = None):","create(self,name:str":!0,"":"","None,extraction_config:list":!0,"None,metadata:dict":!0,"None,config:dict":!0,"None):":!0},"      '''\n      Function to create Catalog \n\n      **Parameters**\n      - `name` (str): Name of catalog\n      - `extraction_config` (list, optional): list of extraction configs. Each one must contain keys: \"taxonomy_id\",\"active\",\"graph_id\",\"type\"\n      - `metadata` (dict, optional): metadata\n\n      **Returns**\n      - `catalog` : `blox.catalog.catalog.Catalog`\n\n      '''\n      \n\n      payload = {\n          \"name\": name\n      }\n\n      if extraction_config:\n          payload.update({\"extraction_config\":extraction_config})\n      if metadata:\n          payload.update({\"metadata\":metadata})\n      if config:\n          payload.update({\"config\":config})\n\n      try:\n          \n          response = self.catalog_api.create_catalog(body = payload,_preload_content = False)\n          \n          catalog, request_id = self._get_data_from_response(response)\n          \n\n          #print(catalog)\n          catalog_instance = Catalog(\n                              name=catalog['name'],\n                              schema=catalog['schema'], \n                              datasources=catalog['data_sources'],\n                              id=catalog['catalog_id'],\n                              metadata=catalog['metadata'],\n                              extraction_config=catalog['extraction_config'],\n                              config = catalog['config'],\n                              x_api_key=self.x_api_key,\n                              created_ts=catalog['created_ts'],\n                              updated_ts=catalog['updated_ts'])\n          \n          self.logger.info('request_id: {0}'.format(request_id))                \n          return catalog_instance\n      except ApiException as api_exception:\n          self.logger.exception(\"API exception\")\n          raise BloxApiError(status = api_exception.status,reason = api_exception.reason, body = api_exception.body)\n      except:\n          self.logger.exception(\"SDK exception\")\n          raise BloxException(fmt=\"Error in creating catalog: {0}\".format(name))\n"))))}d.isMDXComponent=!0}}]);