"use strict";(self.webpackChunkionic_docs=self.webpackChunkionic_docs||[]).push([[54224],{3905:function(t,e,r){r.d(e,{Zo:function(){return d},kt:function(){return f}});var n=r(67294);function a(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function l(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function o(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?l(Object(r),!0).forEach((function(e){a(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function s(t,e){if(null==t)return{};var r,n,a=function(t,e){if(null==t)return{};var r,n,a={},l=Object.keys(t);for(n=0;n<l.length;n++)r=l[n],e.indexOf(r)>=0||(a[r]=t[r]);return a}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(n=0;n<l.length;n++)r=l[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(a[r]=t[r])}return a}var i=n.createContext({}),u=function(t){var e=n.useContext(i),r=e;return t&&(r="function"==typeof t?t(e):o(o({},e),t)),r},d=function(t){var e=u(t.components);return n.createElement(i.Provider,{value:e},t.children)},p={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},c=n.forwardRef((function(t,e){var r=t.components,a=t.mdxType,l=t.originalType,i=t.parentName,d=s(t,["components","mdxType","originalType","parentName"]),c=u(r),f=a,m=c["".concat(i,".").concat(f)]||c[f]||p[f]||l;return r?n.createElement(m,o(o({ref:e},d),{},{components:r})):n.createElement(m,o({ref:e},d))}));function f(t,e){var r=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var l=r.length,o=new Array(l);o[0]=c;var s={};for(var i in e)hasOwnProperty.call(e,i)&&(s[i]=e[i]);s.originalType=t,s.mdxType="string"==typeof t?t:a,o[1]=s;for(var u=2;u<l;u++)o[u]=r[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}c.displayName="MDXCreateElement"},44482:function(t,e,r){r.r(e),r.d(e,{frontMatter:function(){return s},contentTitle:function(){return i},metadata:function(){return u},toc:function(){return d},default:function(){return c}});var n=r(87462),a=r(63366),l=(r(67294),r(3905)),o=["components"],s={title:"  Catalog",sidebar_label:"Catalog"},i=void 0,u={unversionedId:"api/action-sheet copy",id:"api/action-sheet copy",isDocsHomePage:!1,title:"  Catalog",description:"Catalog(",source:"@site/docs/api/action-sheet copy.md",sourceDirName:"api",slug:"/api/action-sheet copy",permalink:"/docs/api/action-sheet copy",editUrl:"https://github.com/ionic-team/ionic-docs/tree/main/docs/api/action-sheet copy.md",tags:[],version:"current",frontMatter:{title:"  Catalog",sidebar_label:"Catalog"}},d=[{value:"<strong>Catalog</strong>(",id:"catalog",children:[],level:2},{value:"<strong>name</strong>: str",id:"name-str",children:[],level:2},{value:"<strong>schema</strong>: blox.catalog.schema.Schema",id:"schema-bloxcatalogschemaschema",children:[],level:2},{value:"<strong>datasources</strong>: list",id:"datasources-list",children:[],level:2},{value:"<strong>metadata</strong>: dict",id:"metadata-dict",children:[],level:2},{value:"<strong>extraction_config</strong>: list",id:"extraction_config-list",children:[],level:2},{value:"<strong>config</strong>: dict",id:"config-dict",children:[],level:2},{value:"<strong>status</strong>: str",id:"status-str",children:[],level:2},{value:"<strong>created_ts</strong>: str",id:"created_ts-str",children:[],level:2},{value:"<strong>def</strong> <strong>refresh</strong>(self)",id:"def-refreshself",children:[],level:2},{value:"<strong>def</strong> <strong>save</strong>(self)",id:"def-saveself",children:[],level:2},{value:"<strong>def</strong> <strong>delete</strong>(self)",id:"def-deleteself",children:[],level:2},{value:"<strong>def</strong> <strong>get_summary</strong>(self)",id:"def-get_summaryself",children:[],level:2},{value:"<strong>def</strong> <strong>add_datasource</strong>(self, datasource_payload: dict):",id:"def-add_datasourceself-datasource_payload-dict",children:[],level:2},{value:"<strong>def</strong> <strong>get_datasource</strong>(self, datasource_id: str):",id:"def-get_datasourceself-datasource_id-str",children:[],level:2},{value:"<strong>def</strong> <strong>enable</strong>(self):",id:"def-enableself",children:[],level:2},{value:"<strong>def</strong> <strong>list_products</strong>(",id:"def-list_products",children:[],level:2},{value:"<strong>def</strong> <strong>list_records</strong>(",id:"def-list_records",children:[{value:"Inherited Members",id:"inherited-members",children:[],level:5}],level:2}],p={toc:d};function c(t){var e=t.components,r=(0,a.Z)(t,o);return(0,l.kt)("wrapper",(0,n.Z)({},p,r,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"catalog"},(0,l.kt)("strong",{parentName:"h2"},"Catalog"),"("),(0,l.kt)("p",null," name: str = ",(0,l.kt)("strong",{parentName:"p"},"None"),","),(0,l.kt)("p",null," schema:",(0,l.kt)("a",{parentName:"p",href:"https://d16mhahokhyjuk.cloudfront.net/staging/blox/catalog/schema.html#Schema"},"blox.catalog.schema.Schema")," = ",(0,l.kt)("strong",{parentName:"p"},"None"),","),(0,l.kt)("p",null," datasources: list = [],"),(0,l.kt)("p",null," id: str = ",(0,l.kt)("strong",{parentName:"p"},"None"),","),(0,l.kt)("p",null," metadata: dict = {},"),(0,l.kt)("p",null," extraction_config: list = [],"),(0,l.kt)("p",null," config: dict = {},"),(0,l.kt)("p",null," status='',"),(0,l.kt)("p",null," created_ts='',"),(0,l.kt)("p",null," updated_ts='',"),(0,l.kt)("p",null," **kwargs"),(0,l.kt)("p",null,")"),(0,l.kt)("p",null,"Each catalog contains a schema and a datasource."),(0,l.kt)("h2",{id:"name-str"},(0,l.kt)("strong",{parentName:"h2"},"name"),": str"),(0,l.kt)("p",null,"Name of catalog. Defaults to None."),(0,l.kt)("h2",{id:"schema-bloxcatalogschemaschema"},(0,l.kt)("strong",{parentName:"h2"},"schema"),": ",(0,l.kt)("a",{parentName:"h2",href:"https://d16mhahokhyjuk.cloudfront.net/staging/blox/catalog/schema.html#Schema"},"blox.catalog.schema.Schema")),(0,l.kt)("p",null,"Schema table containing all fields of the catalog. Defaults to None."),(0,l.kt)("h2",{id:"datasources-list"},(0,l.kt)("strong",{parentName:"h2"},"datasources"),": list"),(0,l.kt)("p",null,"Source of the data. Defaults to []"),(0,l.kt)("h2",{id:"metadata-dict"},(0,l.kt)("strong",{parentName:"h2"},"metadata"),": dict"),(0,l.kt)("p",null,"Catalog metadata"),(0,l.kt)("h2",{id:"extraction_config-list"},(0,l.kt)("strong",{parentName:"h2"},"extraction_config"),": list"),(0,l.kt)("p",null,'Each extraction config has mandatory keys ("taxonomy_id","active","graph_id","type")'),(0,l.kt)("h2",{id:"config-dict"},(0,l.kt)("strong",{parentName:"h2"},"config"),": dict"),(0,l.kt)("p",null,"Current status of catalog"),(0,l.kt)("h2",{id:"status-str"},(0,l.kt)("strong",{parentName:"h2"},"status"),": str"),(0,l.kt)("p",null,"Created time"),(0,l.kt)("h2",{id:"created_ts-str"},(0,l.kt)("strong",{parentName:"h2"},"created_ts"),": str"),(0,l.kt)("p",null,"Updated time"),(0,l.kt)("h2",{id:"def-refreshself"},(0,l.kt)("strong",{parentName:"h2"},"def")," ",(0,l.kt)("strong",{parentName:"h2"},"refresh"),"(self)"),(0,l.kt)("p",null,"Refresh the catalog to get the latest data"),(0,l.kt)("p",null,"Returns: bool: Returns true on succesful refresh"),(0,l.kt)("h2",{id:"def-saveself"},(0,l.kt)("strong",{parentName:"h2"},"def")," ",(0,l.kt)("strong",{parentName:"h2"},"save"),"(self)"),(0,l.kt)("p",null,"Function to update a catalog. Only fields 'name', 'config' , 'metadata' and 'extraction_config' are updated using this method."),(0,l.kt)("p",null,"returns: self (Catalog): Updated catalog"),(0,l.kt)("h2",{id:"def-deleteself"},(0,l.kt)("strong",{parentName:"h2"},"def")," ",(0,l.kt)("strong",{parentName:"h2"},"delete"),"(self)"),(0,l.kt)("h2",{id:"def-get_summaryself"},(0,l.kt)("strong",{parentName:"h2"},"def")," ",(0,l.kt)("strong",{parentName:"h2"},"get_summary"),"(self)"),(0,l.kt)("p",null,"Function to get a catalog summary by the catalog ID"),(0,l.kt)("p",null,"Returns summary(dict): Dictionary containing the summary"),(0,l.kt)("h2",{id:"def-add_datasourceself-datasource_payload-dict"},(0,l.kt)("strong",{parentName:"h2"},"def")," ",(0,l.kt)("strong",{parentName:"h2"},"add_datasource"),"(self, datasource_payload: dict):"),(0,l.kt)("p",null,"Function to add a datasource to catalog"),(0,l.kt)("p",null,"Parameters"),(0,l.kt)("p",null,"datasource_payload (dict): datasource payload structure"),(0,l.kt)("p",null,"{"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"name*: string\n\ntype*: string\n\nconfig* {\n\n}\n\nmode*: string\n\nschedule*: string\n")),(0,l.kt)("p",null,"}"),(0,l.kt)("p",null,"Returns"),(0,l.kt)("p",null,"Catalog object : Catalog object with datasources added to it"),(0,l.kt)("h2",{id:"def-get_datasourceself-datasource_id-str"},(0,l.kt)("strong",{parentName:"h2"},"def")," ",(0,l.kt)("strong",{parentName:"h2"},"get_datasource"),"(self, datasource_id: str):"),(0,l.kt)("p",null,"Function to get datasource by UUID"),(0,l.kt)("p",null,"Parameters"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"datasource_id (str): UUID of datasource")),(0,l.kt)("p",null,"Returns"),(0,l.kt)("p",null,"datasource (Datasource obj): Filtered datsource"),(0,l.kt)("h2",{id:"def-enableself"},(0,l.kt)("strong",{parentName:"h2"},"def")," ",(0,l.kt)("strong",{parentName:"h2"},"enable"),"(self):"),(0,l.kt)("p",null,"Function to enable the catalog"),(0,l.kt)("p",null,"Returns"),(0,l.kt)("p",null,"response (dict): Response from API denoting success or failure"),(0,l.kt)("h2",{id:"def-list_products"},(0,l.kt)("strong",{parentName:"h2"},"def")," ",(0,l.kt)("strong",{parentName:"h2"},"list_products"),"("),(0,l.kt)("p",null," self,"),(0,l.kt)("p",null," search_text: str = ",(0,l.kt)("strong",{parentName:"p"},"None"),","),(0,l.kt)("p",null," filters: list = [],"),(0,l.kt)("p",null," response_fields: list = [],"),(0,l.kt)("p",null," facets: list = [],"),(0,l.kt)("p",null," page: int = 1,"),(0,l.kt)("p",null," facet_limit: int = 100,"),(0,l.kt)("p",null," max_content: int = ",(0,l.kt)("strong",{parentName:"p"},"None"),","),(0,l.kt)("p",null," min_content: int = ",(0,l.kt)("strong",{parentName:"p"},"None"),","),(0,l.kt)("p",null," sort_by: str = ",(0,l.kt)("strong",{parentName:"p"},"None"),","),(0,l.kt)("p",null," sort_order='asc'"),(0,l.kt)("p",null,"):"),(0,l.kt)("p",null,"Function to search through the catalog It returns a list of products (in a paginated structure) given a search query and/or list of filters."),(0,l.kt)("p",null,"Parameters"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"search_text (str, optional) - Term(s) for which search operation has to be performed. To be passed for text search case alone."),(0,l.kt)("li",{parentName:"ul"},"filters (list, optional) - List of filters to be applied to the recommendation results. List of filters should be of format ","[{'field':str,'type':str,'value':str}]"),(0,l.kt)("li",{parentName:"ul"},"response_fields (list, optional) - List of fields to be fetched for every product in the response."),(0,l.kt)("li",{parentName:"ul"},"facets (list, optional) - ndicates the list of facets to be returned in the response. Example: brand, size, color, category, sub_cat, etc,"),(0,l.kt)("li",{parentName:"ul"},"page (int, optional) - Indicates which page results to be retrieved. Defaults to 2."),(0,l.kt)("li",{parentName:"ul"},"facet_limit (int, optional) - Number of facet values to be returned per facet field. Defaults to 100."),(0,l.kt)("li",{parentName:"ul"},"max_content (int, optional) - Maximum number of products to return. Defaults to None"),(0,l.kt)("li",{parentName:"ul"},"min_content (int, optional) - Minimum number of products to return. Defaults to None"),(0,l.kt)("li",{parentName:"ul"},"sort_by (str, optional) - Indicates the field using which sort needs to be performed."),(0,l.kt)("li",{parentName:"ul"},"sort_order (enum, optional) - Indicates the sorting order in which results has to be returned.")),(0,l.kt)("p",null,"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"search_results")," (dict): search results based on applied filters and/or search query"),(0,l.kt)("h2",{id:"def-list_records"},(0,l.kt)("strong",{parentName:"h2"},"def")," ",(0,l.kt)("strong",{parentName:"h2"},"list_records"),"("),(0,l.kt)("p",null," self,"),(0,l.kt)("p",null," search_text: str = ",(0,l.kt)("strong",{parentName:"p"},"None"),","),(0,l.kt)("p",null," filters: list = [],"),(0,l.kt)("p",null," response_fields: list = [],"),(0,l.kt)("p",null," facets: list = [],"),(0,l.kt)("p",null," page: int = 1,"),(0,l.kt)("p",null," facet_limit: int = 100,"),(0,l.kt)("p",null," max_content: int = ",(0,l.kt)("strong",{parentName:"p"},"None"),","),(0,l.kt)("p",null," min_content: int = ",(0,l.kt)("strong",{parentName:"p"},"None"),","),(0,l.kt)("p",null," sort_by: str = ",(0,l.kt)("strong",{parentName:"p"},"None"),","),(0,l.kt)("p",null," sort_order='asc'"),(0,l.kt)("p",null,"):"),(0,l.kt)("p",null,"Function to search through the catalog It returns a list of records (in a paginated structure) given a search query and/or list of filters."),(0,l.kt)("p",null,"Parameters"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"search_text (str, optional) - Term(s) for which search operation has to be performed. To be passed for text search case alone."),(0,l.kt)("li",{parentName:"ul"},"filters (list, optional) - List of filters to be applied to the recommendation results. List of filters should be of format ","[{'field':str,'type':str,'value':str}]"),(0,l.kt)("li",{parentName:"ul"},"response_fields (list, optional) - List of fields to be fetched for every product in the response."),(0,l.kt)("li",{parentName:"ul"},"facets (list, optional) - ndicates the list of facets to be returned in the response. Example: brand, size, color, category, sub_cat, etc,"),(0,l.kt)("li",{parentName:"ul"},"page (int, optional) - Indicates which page results to be retrieved. Defaults to 2."),(0,l.kt)("li",{parentName:"ul"},"facet_limit (int, optional) - Number of facet values to be returned per facet field. Defaults to 100."),(0,l.kt)("li",{parentName:"ul"},"max_content (int, optional) - Maximum number of records to return. Defaults to None"),(0,l.kt)("li",{parentName:"ul"},"min_content (int, optional) - Minimum number of records to return. Defaults to None"),(0,l.kt)("li",{parentName:"ul"},"sort_by (str, optional) - Indicates the field using which sort needs to be performed."),(0,l.kt)("li",{parentName:"ul"},"sort_order (enum, optional) - Indicates the sorting order in which results has to be returned.")),(0,l.kt)("p",null,"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"search_results")," (dict): search results based on applied filters and/or search query"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"def")," ",(0,l.kt)("strong",{parentName:"p"},"list_feeds"),"(self, page_num: int = 1, page_size: int = 10, exclude: list = ",(0,l.kt)("strong",{parentName:"p"},"None"),"):"),(0,l.kt)("p",null,"Function to return the list of feeds, for a specified catalog id"),(0,l.kt)("p",null,"Parameters"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"page_num (int, optional) - query param, page number for the results to be returned"),(0,l.kt)("li",{parentName:"ul"},"page_size (int, optional) - query param, number of results to be returned within each page"),(0,l.kt)("li",{parentName:"ul"},"exclude (list, optional) - query param, value(feed_id) passed to this will be excluded from the returned results")),(0,l.kt)("p",null,"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"search_results")," (dict): List response of the feeds related to the given catalog_id as per the filters provided"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"def")," ",(0,l.kt)("strong",{parentName:"p"},"get_feed"),"(self, feed_id: str):"),(0,l.kt)("p",null,"Function to return the metadata of a feed of a catalog"),(0,l.kt)("p",null,"Parameters"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"feed_id (str, required) - ID of the feed")),(0,l.kt)("p",null,"Returns"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"feed_details (dict) - Meta data of the feed")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"def")," ",(0,l.kt)("strong",{parentName:"p"},"export_feed"),"(self, feed_id: str):"),(0,l.kt)("p",null,"Function to return a downloadable url to a CSV File containing the Feed Failures for a given catalog and feed"),(0,l.kt)("p",null,"Parameters"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"feed_id (str, required) - ID of the feed")),(0,l.kt)("p",null,"Returns"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"url (string) - URL to downloadable CSV File")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"def")," ",(0,l.kt)("strong",{parentName:"p"},"edit_records"),"(self, records):"),(0,l.kt)("p",null,"Method to bulk edit records in a catalog"),(0,l.kt)("p",null,"Parameters"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"records (list, required) - List of dicts containing the update payload for each record. Each dict must contain the primary key,value of the record being editted and all the fields of the record.")),(0,l.kt)("p",null,"Returns"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"response (dict) - Response dict containng status of update operation for each record")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"def")," ",(0,l.kt)("strong",{parentName:"p"},"get_user_history"),"(self, user_id=",(0,l.kt)("strong",{parentName:"p"},"None"),", blox_uuid=",(0,l.kt)("strong",{parentName:"p"},"None"),", events=[]):"),(0,l.kt)("p",null,"Method to get the user history for the given list of events Either user_id or blox_uuid is mandatory."),(0,l.kt)("p",null,"Args: - user_id (str, optional): user's id. Defaults to None. - blox_uuid (str, optional): Blox UUID of product. Defaults to None. - events (list, optional): List of events such as Buy,PDP Pageview. Defaults to []."),(0,l.kt)("p",null,"Returns: - response (dict): User history"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"def")," ",(0,l.kt)("strong",{parentName:"p"},"get_job_status"),"(self, job_id):"),(0,l.kt)("p",null,"Method to get status of a job Parameters - job_id (str): UUID of job Returns - response (dict) - Job details such as job_id,status,job_type"),(0,l.kt)("h5",{id:"inherited-members"},"Inherited Members"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"blox.base.base.Blox")," get"))}c.isMDXComponent=!0}}]);