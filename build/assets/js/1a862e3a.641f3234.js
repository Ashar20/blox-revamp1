"use strict";(self.webpackChunkionic_docs=self.webpackChunkionic_docs||[]).push([[85854],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return m}});var n=a(67294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function r(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var s=n.createContext({}),d=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=d(e.components);return n.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,o=e.originalType,s=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),f=d(a),m=l,u=f["".concat(s,".").concat(m)]||f[m]||c[m]||o;return a?n.createElement(u,i(i({ref:t},p),{},{components:a})):n.createElement(u,i({ref:t},p))}));function m(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var o=a.length,i=new Array(o);i[0]=f;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r.mdxType="string"==typeof e?e:l,i[1]=r;for(var d=2;d<o;d++)i[d]=a[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}f.displayName="MDXCreateElement"},83388:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return r},contentTitle:function(){return s},metadata:function(){return d},toc:function(){return p},default:function(){return f}});var n=a(87462),l=a(63366),o=(a(67294),a(3905)),i=["components"],r={title:"  Catalog",sidebar_label:"Schema"},s=void 0,d={unversionedId:"api/action-sheet copy 3",id:"api/action-sheet copy 3",isDocsHomePage:!1,title:"  Catalog",description:"class Schema(blox.base.base.Blox)",source:"@site/docs/api/action-sheet copy 3.md",sourceDirName:"api",slug:"/api/action-sheet copy 3",permalink:"/docs/api/action-sheet copy 3",editUrl:"https://github.com/ionic-team/ionic-docs/tree/main/docs/api/action-sheet copy 3.md",tags:[],version:"current",frontMatter:{title:"  Catalog",sidebar_label:"Schema"}},p=[{value:"class Schema(blox.base.base.Blox)",id:"class-schemabloxbasebaseblox",children:[],level:2},{value:"Schema(catalog_id, fields=[], **kwargs)",id:"schemacatalog_id-fields-kwargs",children:[],level:2},{value:"def initalize(self, schema_payload)",id:"def-initalizeself-schema_payload",children:[{value:"Inherited Members",id:"inherited-members",children:[],level:3}],level:2}],c={toc:p};function f(e){var t=e.components,a=(0,l.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"class-schemabloxbasebaseblox"},"class Schema(blox.base.base.Blox)"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://d16mhahokhyjuk.cloudfront.net/staging/blox/catalog/schema.html#Schema"})),(0,o.kt)("h2",{id:"schemacatalog_id-fields-kwargs"},"Schema(catalog_id, fields=[], **kwargs)"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://d16mhahokhyjuk.cloudfront.net/staging/blox/catalog/schema.html#Schema.__init__"})),(0,o.kt)("h2",{id:"def-initalizeself-schema_payload"},"def initalize(self, schema_payload)"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://d16mhahokhyjuk.cloudfront.net/staging/blox/catalog/schema.html#Schema.initalize"})),(0,o.kt)("p",null,"Sets the fields sent in the form of list of dicts to the schema table"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Parameters")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"schema_payload"),"  - List of fields to be added to schema")),(0,o.kt)("p",null,"def  initialize(self, schema_payload):"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://d16mhahokhyjuk.cloudfront.net/staging/blox/catalog/schema.html#Schema.initialize"})),(0,o.kt)("p",null,"Sets the fields sent in the form of list of dicts to the schema table"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Parameters")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"schema_payload"),"  - List of fields to be added to schema")),(0,o.kt)("p",null,"def  edit(self, add: list = None, delete: list = None, update: list = None):"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://d16mhahokhyjuk.cloudfront.net/staging/blox/catalog/schema.html#Schema.edit"})),(0,o.kt)("p",null,"Method to add,delete and update fields to schema"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Parameters"),"  -  ",(0,o.kt)("inlineCode",{parentName:"p"},"add"),"  (list): list of fields to be added -  ",(0,o.kt)("inlineCode",{parentName:"p"},"delete"),"  (list): list of field names to be deleted -  ",(0,o.kt)("inlineCode",{parentName:"p"},"update"),"  (list): list of fields to be updated"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Returns"),"  -  ",(0,o.kt)("inlineCode",{parentName:"p"},"data"),"  (dict): Dict containing information of job pointing to the update job"),(0,o.kt)("p",null,"def  add_fields(self, fields: list):"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://d16mhahokhyjuk.cloudfront.net/staging/blox/catalog/schema.html#Schema.add_fields"})),(0,o.kt)("p",null,"Method to add fields to schema"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Parameters"),"  -  ",(0,o.kt)("inlineCode",{parentName:"p"},"fields"),"  (list): List of field dicts to be added"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Returns"),"  -  ",(0,o.kt)("inlineCode",{parentName:"p"},"data"),"  (dict): Dict containing information of job pointing to the update job"),(0,o.kt)("p",null,"def  update_fields(self, fields):"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://d16mhahokhyjuk.cloudfront.net/staging/blox/catalog/schema.html#Schema.update_fields"})),(0,o.kt)("p",null,"Method to update fields in schema"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Parameters"),"  -  ",(0,o.kt)("inlineCode",{parentName:"p"},"fields"),"  (list): List of field dicts to be updated."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Returns"),"  -  ",(0,o.kt)("inlineCode",{parentName:"p"},"data"),"  (dict): Dict containing information of job pointing to the update job"),(0,o.kt)("p",null,"def  remove_fields(self, fields: list):"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://d16mhahokhyjuk.cloudfront.net/staging/blox/catalog/schema.html#Schema.remove_fields"})),(0,o.kt)("p",null,"Method to delete fields in schema"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Parameters"),"  -  ",(0,o.kt)("inlineCode",{parentName:"p"},"fields"),"  (list): List of field names (str) to be deleted"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Returns"),"  -  ",(0,o.kt)("inlineCode",{parentName:"p"},"data"),"  (dict): Dict containing information of job pointing to the update job"),(0,o.kt)("p",null,"def  filter_fields( self, facet=None, index=None, search=None, meta=None, blox_generated=None, boost=None):"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://d16mhahokhyjuk.cloudfront.net/staging/blox/catalog/schema.html#Schema.filter_fields"})),(0,o.kt)("p",null,"Method to filter fields of a schema based on the field attributes"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Parameters"),"  ",(0,o.kt)("inlineCode",{parentName:"p"},"facet"),"  (bool, optional): Filter for field if facet=True. Defaults to None.  ",(0,o.kt)("inlineCode",{parentName:"p"},"index"),"  (bool, optional): Filter for field if index=True. Defaults to None.  ",(0,o.kt)("inlineCode",{parentName:"p"},"search"),"  (bool, optional): Filter for field if search=True. Defaults to None.  ",(0,o.kt)("inlineCode",{parentName:"p"},"meta"),"  (bool, optional): Filter for field if meta=True. Defaults to None.  ",(0,o.kt)("inlineCode",{parentName:"p"},"blox_generated"),"  (bool, optional): Filter for field if blox_generated=True (internal fields). Defaults to None.  ",(0,o.kt)("inlineCode",{parentName:"p"},"boost"),"  (bool, optional): Filter for field if boost=True. Defaults to None."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Returns"),"  filtered_fields (list): list of filtered fields"),(0,o.kt)("h3",{id:"inherited-members"},"Inherited Members"),(0,o.kt)("p",null,"blox.base.base.Blox"),(0,o.kt)("p",null,"get"))}f.isMDXComponent=!0}}]);