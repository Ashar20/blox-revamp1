"use strict";(self.webpackChunkionic_docs=self.webpackChunkionic_docs||[]).push([[47762],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return _}});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=a.createContext({}),p=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},l=function(e){var t=p(e.components);return a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),u=p(n),_=o,f=u["".concat(c,".").concat(_)]||u[_]||d[_]||s;return n?a.createElement(f,r(r({ref:t},l),{},{components:n})):a.createElement(f,r({ref:t},l))}));function _(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,r=new Array(s);r[0]=u;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,r[1]=i;for(var p=2;p<s;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},53909:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return c},metadata:function(){return p},toc:function(){return l},default:function(){return u}});var a=n(87462),o=n(63366),s=(n(67294),n(3905)),r=["components"],i={title:"ion-app"},c=void 0,p={unversionedId:"api/app",id:"api/app",isDocsHomePage:!1,title:"ion-app",description:"from swagger_client.api import CatalogsApi",source:"@site/docs/api/app.md",sourceDirName:"api",slug:"/api/app",permalink:"/docs/api/app",editUrl:"https://github.com/ionic-team/ionic-docs/tree/main/docs/api/app.md",tags:[],version:"current",frontMatter:{title:"ion-app"},sidebar:"api",previous:{title:"ion-chip",permalink:"/docs/api/chip"},next:{title:"ion-content",permalink:"/docs/api/content"}},l=[],d={toc:l};function u(e){var t=e.components,n=(0,o.Z)(e,r);return(0,s.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"from swagger_client.api import CatalogsApi\nfrom blox.base import Blox\nfrom blox.exceptions import BloxApiError,BloxException\nfrom swagger_client.rest import ApiException\nimport json\nimport traceback\nclass Datasource(Blox):\ndef ",(0,s.kt)("strong",{parentName:"p"},"init"),"(self,catalog_id,datasource_id,datasource_details,",(0,s.kt)("strong",{parentName:"p"},"kwargs):\nsuper().",(0,s.kt)("strong",{parentName:"strong"},"init"),"("),"kwargs)\nself.catalog_api = CatalogsApi(self.api_client)\nself.catalog_id = catalog_id\nself.datasource_id = datasource_id\nself.datasource_details = datasource_details"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'def test_connection(self):\n\n    try:\n        response = self.catalog_api.test_datasource(catalog_id=self.catalog_id,datasource_id = self.datasource_id ,_preload_content = False)\n        _ , request_id = self._get_data_from_response(response)\n        response_data = json.loads(response.data)\n        self.logger.info(\'request_id: {0}\'.format(request_id))        \n        return response_data\n    except ApiException as api_exception:\n        self.logger.exception("API exception")\n        raise BloxApiError(status = api_exception.status,reason = api_exception.reason, body = api_exception.body)\n    except:\n        self.logger.exception("SDK exception")\n        raise BloxException(fmt="Error while testing connection")\n\n\ndef run(self):\n    try:\n        response = self.catalog_api.datasource_run_now(catalog_id=self.catalog_id,datasource_id = self.datasource_id ,_preload_content = False)\n        _ , request_id = self._get_data_from_response(response)\n        response_data = json.loads(response.data)\n        self.logger.exception("SDK exception")\n        return response_data\n    except ApiException as api_exception:\n        self.logger.exception("API exception")\n        raise BloxApiError(status = api_exception.status,reason = api_exception.reason, body = api_exception.body)\n    except:\n        self.logger.exception("SDK exception")\n        raise BloxException(fmt="Error while running datasource")\n\n\ndef infer_schema(self):\n    """\n    Function to infer schema for a given datasource\n    **Parameters**\n        datasource ( Datasource obj ): Schema is infered for this datasource\n\n    **Returns**\n        response (dict): Response from API denoting success or failure\n    """\n\n    try:\n        #catalog_api = CatalogsApi()\n        response = self.catalog_api.infer_schema(catalog_id=self.catalog_id,datasource_id = self.datasource_id ,_preload_content = False)\n        data, request_id = self._get_data_from_response(response)\n\n        self.logger.info(\'request_id: {0}\'.format(request_id))        \n        return data\n    except ApiException as api_exception:\n        self.logger.exception("API exception")\n        raise BloxApiError(status = api_exception.status,reason = api_exception.reason, body = api_exception.body)\n    except:\n        self.logger.exception("SDK exception")\n        raise BloxException(fmt="Error while infering schema")\n\ndef save(self):\n    """\n    Function to update a datasource\n\n    **Parameters**\n        datasource ( Datasource obj ): Schema is infered for this datasource\n    \n    **Returns**\n        `datasource`: `blox.catalog.datasource.Datasource` object\n    """\n    try:\n        payload = {\n            \'name\': self.datasource_details[\'name\'],\n            # \'type\': self.datasource_details[\'type\'],\n            \'config\': self.datasource_details[\'config\'],\n            # \'mode\': self.datasource_details[\'mode\']\n        }\n        schedule = self.datasource_details.get(\'schedule\', None)\n        if schedule:\n            payload[\'schedule\'] = schedule\n        response = self.catalog_api.update_datasource(body=payload, catalog_id=self.catalog_id, datasource_id=self.datasource_id,_preload_content=False)\n        _ , request_id = self._get_data_from_response(response)\n\n        self.logger.info(\'request_id: {0}\'.format(request_id))        \n        return self\n    except ApiException as api_exception:\n        self.logger.exception("API exception")\n        raise BloxApiError(status = api_exception.status,reason = api_exception.reason, body = api_exception.body)\n    except:\n        self.logger.exception("SDK exception")\n        raise BloxException(fmt="Error while updating datasource")\n\ndef delete(self):\n    """\n    Function to delete a datasource\n    \n    **Returns**\n        None\n    """\n    try:\n        response = self.catalog_api.delete_datasource(catalog_id=self.catalog_id, datasource_id=self.datasource_id,_preload_content=False)\n        _ , request_id = self._get_data_from_response(response)\n\n        self.logger.info(\'request_id: {0}\'.format(request_id))        \n        return None\n    except ApiException as api_exception:\n        self.logger.exception("API exception")\n        raise BloxApiError(status = api_exception.status,reason = api_exception.reason, body = api_exception.body)\n    except:\n        self.logger.exception("SDK exception")\n        raise BloxException(fmt="Error while deleting datasource")\n')),(0,s.kt)("p",null,"class Datasource(blox.base.base.Blox):\nclass Datasource(Blox):\ndef ",(0,s.kt)("strong",{parentName:"p"},"init"),"(self,catalog_id,datasource_id,datasource_details,",(0,s.kt)("strong",{parentName:"p"},"kwargs):\nsuper().",(0,s.kt)("strong",{parentName:"strong"},"init"),"("),"kwargs)\nself.catalog_api = CatalogsApi(self.api_client)\nself.catalog_id = catalog_id\nself.datasource_id = datasource_id\nself.datasource_details = datasource_details"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'def test_connection(self):\n\n    try:\n        response = self.catalog_api.test_datasource(catalog_id=self.catalog_id,datasource_id = self.datasource_id ,_preload_content = False)\n        _ , request_id = self._get_data_from_response(response)\n        response_data = json.loads(response.data)\n        self.logger.info(\'request_id: {0}\'.format(request_id))        \n        return response_data\n    except ApiException as api_exception:\n        self.logger.exception("API exception")\n        raise BloxApiError(status = api_exception.status,reason = api_exception.reason, body = api_exception.body)\n    except:\n        self.logger.exception("SDK exception")\n        raise BloxException(fmt="Error while testing connection")\n\n\ndef run(self):\n    try:\n        response = self.catalog_api.datasource_run_now(catalog_id=self.catalog_id,datasource_id = self.datasource_id ,_preload_content = False)\n        _ , request_id = self._get_data_from_response(response)\n        response_data = json.loads(response.data)\n        self.logger.exception("SDK exception")\n        return response_data\n    except ApiException as api_exception:\n        self.logger.exception("API exception")\n        raise BloxApiError(status = api_exception.status,reason = api_exception.reason, body = api_exception.body)\n    except:\n        self.logger.exception("SDK exception")\n        raise BloxException(fmt="Error while running datasource")\n\n\ndef infer_schema(self):\n    """\n    Function to infer schema for a given datasource\n    **Parameters**\n        datasource ( Datasource obj ): Schema is infered for this datasource\n\n    **Returns**\n        response (dict): Response from API denoting success or failure\n    """\n\n    try:\n        #catalog_api = CatalogsApi()\n        response = self.catalog_api.infer_schema(catalog_id=self.catalog_id,datasource_id = self.datasource_id ,_preload_content = False)\n        data, request_id = self._get_data_from_response(response)\n\n        self.logger.info(\'request_id: {0}\'.format(request_id))        \n        return data\n    except ApiException as api_exception:\n        self.logger.exception("API exception")\n        raise BloxApiError(status = api_exception.status,reason = api_exception.reason, body = api_exception.body)\n    except:\n        self.logger.exception("SDK exception")\n        raise BloxException(fmt="Error while infering schema")\n\ndef save(self):\n    """\n    Function to update a datasource\n\n    **Parameters**\n        datasource ( Datasource obj ): Schema is infered for this datasource\n    \n    **Returns**\n        `datasource`: `blox.catalog.datasource.Datasource` object\n    """\n    try:\n        payload = {\n            \'name\': self.datasource_details[\'name\'],\n            # \'type\': self.datasource_details[\'type\'],\n            \'config\': self.datasource_details[\'config\'],\n            # \'mode\': self.datasource_details[\'mode\']\n        }\n        schedule = self.datasource_details.get(\'schedule\', None)\n        if schedule:\n            payload[\'schedule\'] = schedule\n        response = self.catalog_api.update_datasource(body=payload, catalog_id=self.catalog_id, datasource_id=self.datasource_id,_preload_content=False)\n        _ , request_id = self._get_data_from_response(response)\n\n        self.logger.info(\'request_id: {0}\'.format(request_id))        \n        return self\n    except ApiException as api_exception:\n        self.logger.exception("API exception")\n        raise BloxApiError(status = api_exception.status,reason = api_exception.reason, body = api_exception.body)\n    except:\n        self.logger.exception("SDK exception")\n        raise BloxException(fmt="Error while updating datasource")\n\ndef delete(self):\n    """\n    Function to delete a datasource\n    \n    **Returns**\n        None\n    """\n    try:\n        response = self.catalog_api.delete_datasource(catalog_id=self.catalog_id, datasource_id=self.datasource_id,_preload_content=False)\n        _ , request_id = self._get_data_from_response(response)\n\n        self.logger.info(\'request_id: {0}\'.format(request_id))        \n        return None\n    except ApiException as api_exception:\n        self.logger.exception("API exception")\n        raise BloxApiError(status = api_exception.status,reason = api_exception.reason, body = api_exception.body)\n    except:\n        self.logger.exception("SDK exception")\n        raise BloxException(fmt="Error while deleting datasource")\n')),(0,s.kt)("p",null,"Datasource(catalog_id, datasource_id, datasource_details, ",(0,s.kt)("strong",{parentName:"p"},"kwargs)\ndef ",(0,s.kt)("strong",{parentName:"strong"},"init"),"(self,catalog_id,datasource_id,datasource_details,"),"kwargs):\nsuper().",(0,s.kt)("strong",{parentName:"p"},"init"),"(**kwargs)\nself.catalog_api = CatalogsApi(self.api_client)\nself.catalog_id = catalog_id\nself.datasource_id = datasource_id\nself.datasource_details = datasource_details\ndef test_connection(self):\ndef test_connection(self):"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'    try:\n        response = self.catalog_api.test_datasource(catalog_id=self.catalog_id,datasource_id = self.datasource_id ,_preload_content = False)\n        _ , request_id = self._get_data_from_response(response)\n        response_data = json.loads(response.data)\n        self.logger.info(\'request_id: {0}\'.format(request_id))        \n        return response_data\n    except ApiException as api_exception:\n        self.logger.exception("API exception")\n        raise BloxApiError(status = api_exception.status,reason = api_exception.reason, body = api_exception.body)\n    except:\n        self.logger.exception("SDK exception")\n        raise BloxException(fmt="Error while testing connection")\n')),(0,s.kt)("p",null,"def run(self):\ndef run(self):\ntry:\nresponse = self.catalog",(0,s.kt)("em",{parentName:"p"},"api.datasource_run_now(catalog_id=self.catalog_id,datasource_id = self.datasource_id ,_preload_content = False)\n"),' , request_id = self._get_data_from_response(response)\nresponse_data = json.loads(response.data)\nself.logger.exception("SDK exception")\nreturn response_data\nexcept ApiException as api_exception:\nself.logger.exception("API exception")\nraise BloxApiError(status = api_exception.status,reason = api_exception.reason, body = api_exception.body)\nexcept:\nself.logger.exception("SDK exception")\nraise BloxException(fmt="Error while running datasource")\ndef infer_schema(self):\ndef infer_schema(self):\n"""\nFunction to infer schema for a given datasource\n',(0,s.kt)("strong",{parentName:"p"},"Parameters"),"\ndatasource ( Datasource obj ): Schema is infered for this datasource"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'    **Returns**\n        response (dict): Response from API denoting success or failure\n    """\n\n    try:\n        #catalog_api = CatalogsApi()\n        response = self.catalog_api.infer_schema(catalog_id=self.catalog_id,datasource_id = self.datasource_id ,_preload_content = False)\n        data, request_id = self._get_data_from_response(response)\n\n        self.logger.info(\'request_id: {0}\'.format(request_id))        \n        return data\n    except ApiException as api_exception:\n        self.logger.exception("API exception")\n        raise BloxApiError(status = api_exception.status,reason = api_exception.reason, body = api_exception.body)\n    except:\n        self.logger.exception("SDK exception")\n        raise BloxException(fmt="Error while infering schema")\n')),(0,s.kt)("p",null,"Function to infer schema for a given datasource Parameters datasource ( Datasource obj ): Schema is infered for this datasource"),(0,s.kt)("p",null,"Returns response (dict): Response from API denoting success or failure"),(0,s.kt)("p",null,'def save(self):\ndef save(self):\n"""\nFunction to update a datasource'),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"    **Parameters**\n        datasource ( Datasource obj ): Schema is infered for this datasource\n    \n    **Returns**\n        `datasource`: `blox.catalog.datasource.Datasource` object\n    \"\"\"\n    try:\n        payload = {\n            'name': self.datasource_details['name'],\n            # 'type': self.datasource_details['type'],\n            'config': self.datasource_details['config'],\n            # 'mode': self.datasource_details['mode']\n        }\n        schedule = self.datasource_details.get('schedule', None)\n        if schedule:\n            payload['schedule'] = schedule\n        response = self.catalog_api.update_datasource(body=payload, catalog_id=self.catalog_id, datasource_id=self.datasource_id,_preload_content=False)\n        _ , request_id = self._get_data_from_response(response)\n\n        self.logger.info('request_id: {0}'.format(request_id))        \n        return self\n    except ApiException as api_exception:\n        self.logger.exception(\"API exception\")\n        raise BloxApiError(status = api_exception.status,reason = api_exception.reason, body = api_exception.body)\n    except:\n        self.logger.exception(\"SDK exception\")\n        raise BloxException(fmt=\"Error while updating datasource\")\n")),(0,s.kt)("p",null,"Function to update a datasource"),(0,s.kt)("p",null,"Parameters datasource ( Datasource obj ): Schema is infered for this datasource"),(0,s.kt)("p",null,"Returns datasource: blox.catalog.datasource.Datasource object"),(0,s.kt)("p",null,'def delete(self):\ndef delete(self):\n"""\nFunction to delete a datasource'),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'    **Returns**\n        None\n    """\n    try:\n        response = self.catalog_api.delete_datasource(catalog_id=self.catalog_id, datasource_id=self.datasource_id,_preload_content=False)\n        _ , request_id = self._get_data_from_response(response)\n\n        self.logger.info(\'request_id: {0}\'.format(request_id))        \n        return None\n    except ApiException as api_exception:\n        self.logger.exception("API exception")\n        raise BloxApiError(status = api_exception.status,reason = api_exception.reason, body = api_exception.body)\n    except:\n        self.logger.exception("SDK exception")\n        raise BloxException(fmt="Error while deleting datasource")\n')),(0,s.kt)("p",null,"Function to delete a datasource"),(0,s.kt)("p",null,"Returns None"),(0,s.kt)("p",null,"Inherited Members\nblox.base.base.Blox get"))}u.isMDXComponent=!0}}]);